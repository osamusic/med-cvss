name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: med-cvss-calculator/package-lock.json
        
    - name: Install dependencies
      run: |
        cd med-cvss-calculator
        npm ci
        
    - name: Run TypeScript type check
      run: |
        cd med-cvss-calculator
        npm run build --if-present
        
    - name: Run tests
      run: |
        cd med-cvss-calculator
        npm test -- --coverage --watchAll=false
        
    - name: Run MITRE decision flow tests
      run: |
        cd med-cvss-calculator
        npm test -- --testPathPattern="mitre.*flow" --watchAll=false
        
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        directory: med-cvss-calculator/coverage
        fail_ci_if_error: false

  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: med-cvss-calculator/package-lock.json
        
    - name: Install dependencies
      run: |
        cd med-cvss-calculator
        npm ci
        
    - name: Run ESLint
      run: |
        cd med-cvss-calculator
        npm run lint --if-present || echo "No lint script found"
        
    - name: Check formatting with Prettier
      run: |
        cd med-cvss-calculator
        npm run format:check --if-present || echo "No format check script found"

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [test, lint]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: med-cvss-calculator/package-lock.json
        
    - name: Install dependencies
      run: |
        cd med-cvss-calculator
        npm ci
        
    - name: Build for production
      run: |
        cd med-cvss-calculator
        npm run build
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-files
        path: med-cvss-calculator/build/
        retention-days: 7

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: med-cvss-calculator/package-lock.json
        
    - name: Install dependencies
      run: |
        cd med-cvss-calculator
        npm ci
        
    - name: Run npm audit
      run: |
        cd med-cvss-calculator
        npm audit --audit-level=moderate
        
    - name: Run dependency vulnerability scan
      uses: actions/dependency-review-action@v3
      if: github.event_name == 'pull_request'

  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      run: |
        docker build -t med-cvss-calculator:latest .
        
    - name: Test Docker image
      run: |
        docker run --rm -d -p 3000:3000 --name test-container med-cvss-calculator:latest
        sleep 10
        curl -f http://localhost:3000 || exit 1
        docker stop test-container

  deploy-preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-files
        path: med-cvss-calculator/build/
        
    - name: Deploy to preview environment
      run: |
        echo "üöÄ Would deploy to preview environment for PR #${{ github.event.number }}"
        echo "üìÅ Build files ready in med-cvss-calculator/build/"
        # Add your deployment commands here (e.g., Netlify, Vercel, etc.)

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, security, docker]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-files
        path: med-cvss-calculator/build/
        
    - name: Deploy to production
      run: |
        echo "üöÄ Deploying to production environment"
        echo "üìÅ Build files ready in med-cvss-calculator/build/"
        # Add your production deployment commands here
        
    - name: Create deployment status
      run: |
        echo "‚úÖ Deployment completed successfully"
        echo "üåê Application URL: https://your-domain.com"